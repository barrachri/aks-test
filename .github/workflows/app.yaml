name: Continuous Integration App

env:
  # Github
  SHA: ${{ github.sha }}

  # Docker
  REGISTRY_NAME: ${{ secrets.REGISTRY_NAME }}
  IMAGE_NAME: ml-app

on:
  # When someone opens a Pull-Request.
  pull_request:
  # When a Pull-Request gets merged into Master.
  push:
    branches:
      - master

jobs:

  # =====
  # Build
  # =====

  app-build:
    name: Application Build
    runs-on: ubuntu-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      
      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}
          username: ${{ secrets.REGISTRY_USERNAME }} 
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Pull latest image
        run: docker pull ${REGISTRY_NAME}/${IMAGE_NAME}
        continue-on-error: true

      - name: Build new image
        run: |
          docker build --target base --build-arg GIT_HASH=${SHA:0:8} -t ${IMAGE_NAME} .
          docker build --target tests -t ${REGISTRY_NAME}/${IMAGE_NAME}:${SHA:0:8}-tests .

      - name: Push new image
        run: |
          docker tag ${IMAGE_NAME} ${REGISTRY_NAME}/${IMAGE_NAME}:${SHA:0:8}
          docker push ${REGISTRY_NAME}/${IMAGE_NAME}:${SHA:0:8}
          docker push ${REGISTRY_NAME}/${IMAGE_NAME}:${SHA:0:8}-tests

  # =====
  # Linters & Tests
  # =====

  app-tests:
    name: App linters & tests
    runs-on: ubuntu-latest

    needs: app-build

    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}
          username: ${{ secrets.REGISTRY_USERNAME }} 
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Pull Docker image
        run: |
          docker pull ${REGISTRY_NAME}/${IMAGE_NAME}:${SHA:0:8}-tests
          docker tag ${REGISTRY_NAME}/${IMAGE_NAME}:${SHA:0:8}-tests ${IMAGE_NAME}
    
      - name: Run Isort
        run: |
          docker run --rm ${IMAGE_NAME} isort --check src tests

      - name: Run Flake8
        run: |
          docker run --rm ${IMAGE_NAME} flake8 src tests

      - name: Run Black
        run: |
          docker run --rm ${IMAGE_NAME} black --check src tests

      - name: Run Mypy
        run: |
          docker run --rm ${IMAGE_NAME} mypy

      - name: Run Pytest
        run: |
          docker run --rm ${IMAGE_NAME} pytest -v

  # ==========
  # Deployment
  # ==========

  app-deployment:
    name: Application Deployment
    runs-on: ubuntu-latest

    # Only deploy Pull-Requests merged into Master.
    if: github.ref == 'refs/heads/master'

    env:
      # Kubernetes
      KUSTOMIZE_VERSION: 4.1.2

      # Azure AKS Cluster
      CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
      CLUSTER_RESOURCE_GROUP: ${{ secrets.CLUSTER_RESOURCE_GROUP }}

    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}
          username: ${{ secrets.REGISTRY_USERNAME }} 
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # Set the target Azure Kubernetes Service (AKS) cluster. 
      - uses: azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

      - name: Install Kustomize
        run: |
          wget https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v${KUSTOMIZE_VERSION}/kustomize_v${KUSTOMIZE_VERSION}_linux_amd64.tar.gz && \
          tar xzf kustomize_v${KUSTOMIZE_VERSION}_linux_amd64.tar.gz && \
          rm kustomize_v${KUSTOMIZE_VERSION}_linux_amd64.tar.gz && \
          mv kustomize ~/kustomize && \
          chmod +x ~/kustomize

      - name: Deploy to Kubernetes
        run: |
          cd infrastructure/deployment
          ~/kustomize edit set image ${REGISTRY_NAME}/${IMAGE_NAME}:${SHA:0:8}
          ~/kustomize build | kubectl apply -f -
